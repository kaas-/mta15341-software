#include <opencv2/core/core.hpp>
#include "opencv2/opencv.hpp"
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/background_segm.hpp>
#include <opencv\cv.h>
#include <iostream>
#include <sstream>


using namespace cv;
using namespace std;

Mat frame;
int keyboard;
//current frame
Mat fgMaskMOG; //fg mask generated by MOG method
int frameNum = 0;
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor

int main(int, char)
{
	

	//pMOG = new BackgroundSubtractorMOG(); //MOG approach
	
	pMOG2 = createBackgroundSubtractorMOG2(20, 16, false); //MOG2 approach
	
	VideoCapture cap(0); // open the default camera

	if (!cap.isOpened()) // check if we succeeded
		return -1;

	for (;;)
	{
		cap >> frame; // get a new frame from camera
		if (!cap.read(frame)) {
			cerr << "Unable to read next frame." << endl;
			continue;
		}
		imshow("orig", frame);
		++frameNum;
		int frameRecordNo = 200;
		if (frameNum < frameRecordNo)
		{
			ostringstream name;
			name << "C:\Dropbox\aau\3rd semester\Programming\imageoutputbg_" << frameNum << ".png";
			cout << "Recording video...";
			pMOG2->apply(frame, fgMaskMOG, -1);
			imwrite(name.str(),fgMaskMOG);
			frameNum++;
			imshow("frame", fgMaskMOG);

		}
		else {
			cout << "Recording has stopped";
			imshow("frame", frame);
		}
		

		if (waitKey(30) >= 0)
			break;
	}
	// the camera will be deinitialized automatically in VideoCapture destructor
	return 0;
}
/*
void processImages(char* firstFrameFilename)
{
	frame = imread(firstFrameFilename);
	if (frame.empty()){
		//error in opening the first image
		cerr << "Unable to open first image frame: " << firstFrameFilename << endl;
		exit(EXIT_FAILURE);
	}
	string fn(firstFrameFilename);
	while ((char)keyboard != 'q' && (char)keyboard != 27)
	{
		pMOG2->apply(frame, fgMaskMOG);
		size_t index = fn.find_last_of("/");
		if (index == string::npos)
		{
			index = fn.find_last_of("\\");
		}
		size_t index2 = fn.find_last_of(".");
		string prefix = fn.substr(0, index + 1);
		string suffix = fn.substr(index2);
		string frameNumberString = fn.substr(index + 1, index2 - index - 1);
		istringstream iss(frameNumberString);
		int frameNo = 0;
		iss >> frameNo;
		rectangle(frame, Point(10, 2), Point(100, 20),Scalar(255), -1);
		putText(frame, frameNumberString.c_str(), Point(15, 15), FONT_HERSHEY_SIMPLEX, 0.5, Scalar(0, 0, 0));
		imshow("frame", frame);
		imshow("fgmask", fgMaskMOG);
		keyboard = waitKey(30);
		ostringstream oss;
		oss << (frameNo + 1);
		string nextFrameNumberString = oss.str();
		string nextFrameFilename = prefix + nextFrameNumberString + suffix;
		//read the next frame
		frame = imread(nextFrameFilename);
		if (frame.empty()){
		//error in opening the next image in the sequence
		cerr << "Unable to open image frame: " << nextFrameFilename << endl;
		exit(EXIT_FAILURE);
		}
		//update the path of the current frame
		fn.assign(nextFrameFilename);
	}
}
*/

void gaussianBlur();

void gaussianBlur(Mat input, Mat output, int Kernel)
{

}

void gaussianKernel()
{

}